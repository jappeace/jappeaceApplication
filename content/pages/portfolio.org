#+TITLE: Portfolio
#+Tags: portfolio, brag, projects
#+Category: reflection
#+Date: 2017-09-06 22:00
#+OPTIONS: toc:nil

#+BEGIN_EXPORT html
<style>
img.design{
  width:50%;
}
</style>
#+END_EXPORT

This page list projects Jappie made.
If they listed here it means they're worthy of being talked about.
This mean they either some kind off value, or used to add value.

With this bar in place, a large host of projects Jappie worked on get eliminated.
Such as that one time he decided to try out [[http://www.purescript.org/][PureScript]] and barely got an
hello world operational,
or that other time where he tried out C++ and just got a window open with a
programmatic drawing.
Indeed most 'practice' school work gets eliminated,
although the projects that were made as part of team exercises to practice
professional work may qualify
(depending on if Jappie can find it,
and manage to get it running so he can screenshot it)
Obviously all work I managed to sell classifies,
but certain hobby projects also count.

#+TOC: headlines 2 

There are three status kinds:

1. Active, Jappie intends to work on this in the future
2. Abandoned, There is no intention of working on this in the future
3. Finished, No more work is necessary, the goals were achieved.

* Raster.click
| Type   | Hobby |
| Status | Active |

[[https://raster.click][Raster]] is a roster system. 
This is made to fit a use case for a restaurant which wants to roster it's
employees ahead of time.
This is currently used at [[http://www.dehuiskamer.com/][Restaurant De Huiskamer]].
A [[http://localhost:8000/plan-prediction.html][blog post]] was written about a possible extension idea,
which essentially uses Q-learning to predict where future employees should be
planned.

#+CAPTION: The raster project
#+LABEL: fig:raster
[[../images/2018/raster.jpg]]

* distrowatch1graph1svg

| Type   | Hobby  |
| Status | Active |
| Source | [[https://github.com/jappeace/distrowatch1graph1svg][github]] |
  
[[https://github.com/jappeace/distrowatch1graph1svg][This project]] is a data gather tool that scrapes [[https://distrowatch.com/][distrowatch]], 
puts it into a graph format, and transforms the result so that it's
parse-able by [[http://futurist.se/gldt/category/gnuclad/][gnuclad]], which turns it into an [[https://developer.mozilla.org/en-US/docs/Web/SVG][SVG]].
Note that the one's in the tile actually should be a pipe symbol,
but github didn't allow that.

The inspiration for this project was that the distribution image presented on
[[https://en.wikipedia.org/wiki/Linux_distribution][Wikipedia]], impressed Jappie so much that he decided to give Linux a try.
This choice had a profound impact on his life.
This lead to all kinds skills we can roughly summarize with the word 'dev ops'.
In fact his website is an almost direct effect of Jappie getting familiar with
Linux at that time.

Later when he saw it again, and found out how it was made,
he decided to improve upon it.
Perhaps someday, someone else may also appreciate the magic that is Linux,
and the power it provides.

A sample can be seen in figure [[fig:distrowatch]].
The program finds all distributions that are on distrowatch,
however it turns out that there are some small mistakes in this data source.
Fortunately the source CSV for the original was made available on the GNUClad
website. One of the remaining tasks is to unify these data sources for a more
complete picture.

Another possible extension is rather than going in a 1 dimensional direction,
where left is earlier in time and right is later in time,
the output could be done in a 2 dimensional direction. Where the center point is
the begin point and time goes outward in circles.
To do this however the GNUClad program needs to be either modified or a new
SVG generator has to be made.

#+LABEL: fig:distrowatch
#+CAPTION: Sample of svg output of this program, left the program, right the original.
[[../images/2018/distrowatch1graph1svg.jpg]]

* Schijt je rijk

| Type   | Contract              |
| Status | Finished successfully |
| End    | 2017                  |
| Source | [[https://github.com/jappeace/schijt-je-rijk][github]]                |

The [[https://www.vvruinen.nl/supportersvereniging/welkom-bij-de-supportersvereniging-vv-ruinen.html][supporters union]] of [[https://www.vvruinen.nl/][soccer club Ruinen]][fn::These are different entities,
apparently]
approached Jappie to make a software variant of a gambling system.
Traditionally what they did was setting up a field where a cow would be
unleashed.
This field would have squares marked out by numbers.
The public could beforehand buy several of these numbers.
Then in whichever of these marked out squares the cow would shit,
would have a winning number and got some price.
There were some additional requirements,
such as being able to have a pause between a round,
specify the amount of rounds and squares.

The task at hand was thus to create a field, add squares to it,
and let a cow wander about.
It also had shown on a big screen.
Jappie decided to implement this in a little language called [[http://elm-lang.org/][Elm]].
The best way to consider elm is as a simplified Haskell, that strongly
encourages to use a React/Redux like architecture (in fact Redux was inspired
by the [[https://redux.js.org/introduction/prior-art#elm][elm architecture]]).
At the time Jappie didn't even know about React and Redux,
he just wanted to try a new language,
the fact that elm could be deployed on a browser rather easily was a big plus
too.
This meant it could be displayed on the big screen almost surely.

The result can be seen in figure [[fig:schijt]].
It was consider to deploy the system on the website too, but since some of the
assets contain copyrighted material not owned by Jappie he decided to just show
a figure instead.
In the figure we can see the cow and some of the areas it shat in.
In this case 297 won, the round blue thing is a button to continue to the
next round (provided by the supporters union).

#+LABEL: fig:schijt
#+CAPTION: Example of solexmarkt at the time, Jappie helped implementing the design in html but did not make the design. (image from the [[https://web.archive.org/web/20140707004850/http://www.solexmarkt.nl/][wayback machine]])
#+ATTR_HTML: :class design
[[../images/2018/schijt-je-rijk.jpg]]

Time pressure was significant whilst implementing this project.
The price was agreed upon when starting the project,
and it turned out to be quite a bit on the short side for Jappie.
Then when the supporters union saw the final result and decided to ask several more
features, Jappie decided to send them a bill describing the cost of each
feature.
Although the union was quite unhappy with this at first, it did halt the
requirement creep.
Only one additional feature was asked, which was rather small to implement,
and additional currency was payed for that.

Jappie learned two things from this,
first of all people understand requirement sizes much better when there is a
currency value attached to it.
Secondly, doing this kind of work full-time is probably not a good option,
negotiating these kind of deals is very stressful and difficult.
This is one of the reasons he decided to consider a full time job instead.

* AI gamespace

| Type   | Hobby     |
| Status | Abandoned |
| End    | 2016      |
| Source | [[https://github.com/jappeace/gdx_ai_gamespace][github]]    |

This was an attempt to make an [[https://www.ageofempires.com/][Age of empires]] like game,
but in which AI could content rather easily with each other.
One of the top priorities was network transparency,
and therefore it was build on top of the [[https://doc.akka.io/docs/akka/2.5/actors.html][akka actor]] framework.
The graphics used was [[https://libgdx.badlogicgames.com/][libgdx]], and the implementing language was Scala.

The way networking was implemented was rather naive, sending the entire world 
state to each client on each drawn frame.
Jappie thinks this is actually a rather unfeasible way of doing game
development.
One should rather focus on implementing the core mechanics on the game,
and figure things such as networking out later.

The reason for listing it here is that the architecture is pretty nice.
It was one of the latest projects I did in Scala, directly preceding 5ol.
Jappie wouldn't put this on his resume however because the only utility it provides
is in having nice source code.

The reason for abandoning it was two fold. First of all Jappie didn't want to
invest more into Scala (or any JVM based language). 
Secondly he wanted to make another kind of game.
Rather than direct command and control he wanted to try what became 5ol.
Currently there are no plans for taking up this project again.

The host is functional and rather easy to install thanks to [[https://gradle.org/][gradle]].
Yes Scala was combined with gradle, and it worked well.

#+CAPTION: The running gamespace in deployment phase, after pressing start you can also move these guys around but there isn't much else going on.
#+ATTR_HTML: :class design
[[../images/2018/gdx-ai-gamespace.jpg]]

* Gravitas

| Type   | School project        |
| Status | Finished successfully |
| End    | 2017                  |

For the course games and agent Jappie worked in a team to re-implement a board
game so we could study various AI methodologies upon it.
We chose to do a board game as we wanted to focus upon the AI aspect rather
than having to do much game mechanics.
This was written in Python.
Jappie did personally neuro-evolution with help of [[https://www.tensorflow.org/][TensorFlow]].

The resulting network did not perform as expected,
but Jappie did learn a lot about neural networks.
Fortunately his team mates did have more successful approaches, 
Q-learning was highly successful.
The hand programmed solution performed by far the best.
The full report is [[../files/2018/gravitas.pdf][available]],
unfortunately the source can't be made available because it would infringe
the intellectual property of [[https://boardgamegeek.com/boardgame/142992/gravwell-escape-9th-dimension][gravwel]] (the board game used).

#+CAPTION: The implemented gravitas game. Function was prefered over form.
#+ATTR_HTML: :class design
[[../images/2018/gravitas.jpg]]

* Solexmarkt

| Type   | Contract              |
| Status | Finished successfully |
| End    | 2013                  |


This was the first contracting job Jappie accepted.
It started out by some simple requests: "Please make my website rank higher into 
Google" and "Help me straightening out the design in HTML".
This was done by modifying the meta tags to rather be as general as possible
for each page to be as specific as possible.
The HTML was also cleaned up.

#+CAPTION: Example of solexmarkt at the time, Jappie helped implementing the design in html but did not make the design. (image from the [[https://web.archive.org/web/20140707004850/http://www.solexmarkt.nl/][wayback machine]])
#+ATTR_HTML: :class design
[[../images/2018/solexmarkt-website.jpg]]

Several months later the request got extended.
"Could I make the static html into a web shop system".
This was done by using two external libraries.
First there was [[http://simplecartjs.org/][simplecartjs]] for offline cart configuration,
and secondly there was [[https://cakephp.org/][CakePHP]].
For handling payment and storing the items to be displayed.

Being new to programming, Jappie still used PHP a lot.
because he was a second year software engineering student he had also heard
about [[https://nl.wikipedia.org/wiki/Model-view-controller-model][MCV]] systems.
Which was all the motivation he needed to give CakePHP a try.
At the time he really enjoyed that framework, it felt much more powerful
than just plain PHP.
MySQL was used as a database, because Jappie was already familiar with that
and he was already experimenting[fn:: There is,
or should be an informal rule to programming projects that says
the reasonable limit for experimentation is one.
That is to say, only experiment with either one framework, one new database,
or one new language. Don't start mixing as it will impact productivity too much.
Never mix and you don't learn much.] by doing CakePHP.
Also at the time it probably didn't even occur to Jappie to try something else.

The reason why the current website is no longer maintained by Jappie is because
of an aversion of using PHP,
and due to poor estimation and negotiation skills.
He kept getting rather low pay for doing this kind of work.
Which was the result of poor estimation of work, combined with requirement creep
(and not knowing how to handle this).
This result into pay which was barely above minimum wage at times.
So he decided to focus upon his studies instead of trying to setup a
consultancy.

* De Huiskamer

| Type   | Contract              |
| Status | Finished successfully |
| Date   | 2008-2015             |

This company is owned by Jappie's parents.
It's a restaurant, and as one can imagine, it provides lots of opportunity for
automation.

** Plan system(s)
The first task was more of a boast, back in 2008 Jappie barely new some basic
PHP and MySQL, yet he told his father he could make the scheduling of
employees much easier by making a website for it.
His father must have thought his son would've been crazy,
but rather than dismissing this, he decided to challenge him.
"If you think you can do this, do it, I'll give you money for it" he said.
Fast forward a month or two and indeed a system had been created.

The style was ugly, the UX was unfriendly, but it worked. It worked well.
And it saved his father loads of time.
This was actually the pre-pre cursor to the [[http://raster.click/][raster]] project.
Unfortunately it is not trivial to make a screenshot of this project.
However the succeeding project, was made two years later when
Jappie had learned about Object Orientated programming and decided to implement
his own [[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller][MVC]] framework (don't we all at some point). See figure [[fig:precursor-raster]].

Compare that to the raster project which can bee seen in figure [[fig:raster]].
In which he used [[https://www.djangoproject.com/][Django]], [[https://getbootstrap.com/][bootstrap]] and [[http://jinja.pocoo.org/docs/2.10/][every]] [[https://pypi.python.org/pypi/django-ical][library]] he could find to make his
life easier.
The raster project is still not in it's final form.
However Jappie is eager to work on that again once he finds the time.


#+CAPTION: The precursor to the raster project. It isn't particularly beautiful either, but used for years and packed with features.
#+LABEL: fig:precursor-raster
#+ATTR_HTML: :class design
[[../images/2018/personeels-planning.jpg]]

** Website designs
He also made the website design of [[http://de2dekamer.nl/nieuw/][de2dekamer.nl]]
(see figure [[fig:2dekamer]]), and implemented it within the [[https://www.drupal.org/][Drupal]] CMS.
This was the first time where he started comparing options in choosing a CMS.
He went with Drupal because at the time he read [[https://www.elegantthemes.com/blog/resources/wordpress-vs-drupal][blog posts]] that said it was the
better choice for developers (rather than [[https://wordpress.com/][WordPress]]).

#+CAPTION: De 2de kamer, design was made by Jappie.
#+LABEL: fig:2dekamer
#+ATTR_HTML: :class design
[[../images/2018/de2dekamer.jpg]]

After that he re-used this design and put it in place for dehuiskamer.com.
Although this design is currently no longer used it can be still appreciated
with help of the waybackmachine as shown in figure [[fig:huiskamer]].
This design is unfortunately no longer used as the owner wanted to have a
website that worked good on mobile.
At the time Jappie did not have enough time available to implement this.

#+CAPTION: De huiskamer, design made by Jappie, thanks to the [[https://web.archive.org/web/20140517090950/http://dehuiskamer.com/][waybackmachine]].
#+LABEL: fig:huiskamer
#+ATTR_HTML: :class design
[[../images/2018/dehuiskamer.jpg]]

** Offertex

| Source | [[https://github.com/jappeace/offertex][github]] |

In another instance of Jappie seeing his father doing repetitive stuff,
he boasted he could mostly automate making offers for him.
Where he only needed to insert certain variable and the program would
generate the result for him.

This was what the [[https://github.com/jappeace/offertex][offertex]] project was about.
Because it's a terminal based program, we can appreciate the output in plain
text shown in source block [[src:offertex]].
Essentially the program just asks you questions about the possible offer.
An offer in this case would be about a potential wedding some customers want to
organize.
It does various other things such as calculating the price and making the
time planning for the offer.

#+LABEL: src:offertex
#+CAPTION: sample output of offertex.
#+BEGIN_SRC shell
Selecteer een template
0: brief
1: brief_bedrijf
2: email
Uw keuze: 
0
specificeer datumfeest 
19-02-2020
specificeer groepgrote 
20
specificeer kinderen 
10
selecteer een betreft: 
0: <? diversen ?>
1: Bruiloft
2: Familiedag
3: Jubileum
4: Personeelsfeest
5: Receptie
6: Vergadering
7: Verjaardag
Uw keuze: 

#+END_SRC

* Projects still to be added
  These are some projects I should consider adding to this page,
  I didn't do them all at once because it is a lot of effort.

1. game programming minor: [[https://github.com/jappeace/hw-isgp-kbs][platform game]]
2. game programming minor: [[https://github.com/Bakkes/Karo][board game]] (in 3d graphics, XNA, etc)
3. game programming minor: [[https://github.com/jappeace/hw-isai][3d stuff]]
4. Android app: city to city carpooling
5. Android app: pick up taxi
6. [[https://github.com/jappeace/gaia][GAIA]] chatbot
7. [[https://github.com/jappeace/5ol][5ol]]
8. Iceberg (argarius)
9. Old website?
10. Kookboek
11. Pokemon stuff (I remember vaguely doing a lot of refactoring and some scala, who knows)

#  LocalWords:  distrowatch1graph1svg
