#+TITLE: Excel in Haskell

* Ask questions!

* Motivation
I think this is quite cool tech

- Shows practical haskell power
- Excel is ubiquitous
- Bragging.

* Why use Excel

- In our case no choice.
- xlsx package 

* Why use Haskell?

* My answer
- TYPES
- Productivity
- Vibrant community
- Battle hardened

* Context
- supercede 
- reinsurance
- tradition

* Uploader
- Upload excel file
- Send to s3
- process to db
- show graphs :)

* Bordereau

| Name | Address           |      Since |
|------+-------------------+------------|
| henk | kieviet straat 8  | 2010-12-08 |
| bart | thorbecke plein 4 | 2012-12-09 |
| piet | flevoweg 12       | 2011-10-18 |

* (Initial) Processing
- Convert excell file to CSV
- Python program
- Put CSV in data types


* (Initial) Cassava

#+BEGIN_SRC haskell
data BordereauRow = MkBordereauRow 
 { name :: Text
 , address :: Text
 , since :: UTCTime
 } deriving FromCSV
#+END_SRC

* Why bad?
#+BEGIN_SRC haskell
data BordereauRow = MkBordereauRow 
 { name :: Text
 , address :: Text
 , since :: UTCTime
 } deriving FromCSV
#+END_SRC

* A: Why bad?
- Slow
- Lose type information 
- Type class errors lose locality

* Excell has types!
let's play is it types or text.

- 5 seconds to answer.

* Numbers
** types or text?
according to excel

* Types!

* Dates
** types or text?
according to excel

* Text!

* Formulas
** types or text?
according to excel

* Types!

* Richtext
** types or text?
according to excel

* Types!

* Anyway
+ More robust validation
+ Faster validation
+ Keep locality info

* Read in memory
First attempt

#+BEGIN_SRC haskell
readExcellFile :: IO Xlsx
readExcellFile = Xlsx.toXlsx <$>
  BS.readFile "somedownloadedfile.xlsx"
#+END_SRC
* What's an xlsx

[[https://hackage.haskell.org/package/xlsx-1.1.0.1/docs/Codec-Xlsx-Types.html]]

* Lens into cells

#+BEGIN_SRC haskell
selectSheet :: Traverse' Xlsx Worksheet
selectSheet = xlSheets . ix 0 . _2

data Xlsx = Xlsx {
    _xlSheets :: [(Text, Worksheet)]
    ... }
#+END_SRC

* Value lens
#+BEGIN_SRC haskell
cellValLens :: RowIndex -> ColumnIndex -> Traverse' Xlsx CellValue
cellValLens rowIx colIx =
  selectSheet . wsCells  . ix (rowIx,colIx) . cellValue . _Just

data WorkSheet = WorkSheet {
  _wsCells :: CellMap
  ... }

type CellMap = Map (RowIndex, ColumnIndex) Cell 
#+END_SRC
* Parsing
tag all errors
#+BEGIN_SRC haskell
data ParseErrors = NameNotFound
                 | AddressNotFound
                 | TimeNotFound
                 | TimeParseError
#+END_SRC



* Parsing
#+BEGIN_SRC haskell
parseRow :: Xlsx -> RowIndex -> Either ParseErrors BordereauRow 
parseRow xlsx rowIx = do
     name <- tagError NameNotFound $
                preview (selectSheet . cellValLens rowIx 1) xlsx
     address <- tagError AddressNotFound $
                preview (selectSheet . cellValLens rowIx 2) xlsx
     sinceRead <- tagError TimeNotFound$
                preview (selectSheet . cellValLens rowIx 3) xlsx
     since <- tagError TimeParseError $ parseTime sinceRead
     pure $ BordereauRow {..}
     where
        tagError err = maybe err pure
#+END_SRC

* Program
#+BEGIN_SRC haskell
main :: IO ()
main = do
     xlsx <- readExcellFile 
     case parseRow xlsx 1 of
       Left errr -> throwIO err
       Right res -> runDB $ insert res
#+END_SRC

* What's wrong with that?

* Answer
+ Memory usage 
+ An error puts in a partial result

* Streaming

#+BEGIN_SRC haskell
main :: IO ()
main = runXlsxM "somedownloadedfile.xlsx" $ do
  readSheet (makeIndex 0) $ \sheetItem -> 
    eResult <- parseSheetItem sheetItem
    case eResult of
      Left err -> throwIO err
      Right res -> runDB $ insert res
#+END_SRC

* Parser

#+BEGIN_SRC haskell
parseSheetItem :: SheetItem -> Either ParseErrors BordereauRow 
parseSheetItem  sheetitem = do
     name <- tagError NameNotFound $
                preview (si_row . ri_cell_row . ix 1) sheetitem
     address <- tagError AddressNotFound $
                preview (si_row . ri_cell_row . ix 2) sheetitem
     sinceRead <- tagError TimeNotFound $
                preview (si_row . ri_cell_row . ix 3) sheetitem
     since <- tagError TimeParseError $ parseTime sinceRead
     pure $ BordereauRow {..}
     where
        tagError err = maybe (Left err) Right
#+END_SRC

* Validation
#+BEGIN_SRC haskell
{-# LANGUAGE ApplicativeDo #-} 
parseSheetItem :: SheetItem -> Validation [ParseErrors] BordereauRow 
parseSheetItem  sheetitem = do
     name <- tagError NameNotFound $
                preview (si_row . ri_cell_row . ix 1) sheetitem
     ...
     pure $ BordereauRow {..}
     where
        tagError err = fromEither . maybe (Left err) Right
#+END_SRC

* Writing files

+ Once we validated everything
+ Pretty graphs are shown
+ We need to write out our summeries and transformed data

* Streamin writing

#+BEGIN_SRC haskell
cellText :: Text -> Cell
cellText txt = Cell
  { _cellValue = Just CellText txt
  }

main :: IO ()
main = do
   runConduitRes $ 
    yield (MkRow 0 $ IntMap.fromList
          [cellText "one",  cellText "two"] )
    .| writeXlsx defaultSettings
    .| C.sinkFile "my-file.xlsx"
#+END_SRC

* Streamin Fastly

+ Alternative
  https://github.com/SupercedeTech/libxlsxwriter-hs
+ Faster
+ Loses expressiveness


* Correctness
+ Add a column

* Example 

| Name | Address           |      Since | age |
|------+-------------------+------------+-----|
| henk | kieviet straat 8  | 2010-12-08 |  35 |
| bart | thorbecke plein 4 | 2012-12-09 |  30 |
| piet | flevoweg 12       | 2011-10-18 |  22 |

* TH Xlsx
#+BEGIN_SRC haskell
policyBordereau :: LBS.ByteString
policyBordereau = 
  $(embedFile "bordereau-template.xlsx")

policyBordereauTemplate :: Xlsx
policyBordereauTemplate = 
  toXlsx $ LBS.fromStrict policyBordereau 
#+END_SRC
  
* Reading a row
#+BEGIN_SRC haskell
headerRowToVector :: Xlsx -> RowIndex -> Vector (ColumnIndex, Text)
headerRowToVector template rowNum =
  Vec.fromList $ catMaybes $ takeWhile isJust $
      [columnOffset ..] <&> \x ->
        template ^? dataTraverse . cellValueAtXY (x, rowNum)
            . _Just . cellTextPrism . to (x,)

computerReadableHeaderRow :: Xlsx -> Vector (ColumnIndex, Text)
computerReadableHeaderRow template = headerRowToVector template 1

columnIndices :: Xlsx -> Vector Text
columnIndices = fmap snd . computerReadableHeaderRow 
#+END_SRC



* Usage

#+BEGIN_SRC haskell
spec :: Spec
spec = do
  describe "policyBordereauTemplate" $ do
    it "should have the same ordering and names as the Bordereau data type" $
       columnIndices policyBordereauTemplate `shouldBe`
          ["name", "address", "since", "age"]
#+END_SRC

* Aligning with datatype

* Data type

#+BEGIN_SRC haskell
data BordereauRow = MkBordereauRow 
 { name :: Text
 , address :: Text
 , since :: UTCTime
 , age :: Int
 } 
#+END_SRC

* Generic

#+BEGIN_SRC haskell
data BordereauRow = MkBordereauRow 
 { name :: Text
 , address :: Text
 , since :: UTCTime
 , age :: Int
 } deriving Generic
#+END_SRC

* Does anyone happen to know how to use generics?

* Fieldnames

#+BEGIN_SRC haskell
module FieldNames
  ( getNames
  )
where

import GHC.Generics

class FieldNames rep where
  fieldNames :: [String]

instance FieldNames f => FieldNames (M1 D x f) where
  fieldNames = fieldNames @f

instance FieldNames f => FieldNames (M1 C x f) where
  fieldNames = fieldNames @f

instance Selector s => FieldNames (M1 S s (K1 R t)) where
  fieldNames =
    [selName (error "should not be evaluated" :: M1 S s (K1 R t) ())]

instance (FieldNames a, FieldNames b) => FieldNames (a :*: b) where
  fieldNames = fieldNames @a ++ fieldNames @b

instance FieldNames U1 where
  fieldNames = []

-- | Get's the field names of a generic record
getNames :: forall a . FieldNames (Rep a) => [String]
getNames = fieldNames @(Rep a)
#+END_SRC 

* The test 

#+BEGIN_SRC haskell
spec :: Spec
spec = do
  describe "policyBordereauTemplate" $ do
    it "should have the same ordering and names as the Bordereau data type" $
      columnIndices policyBordereauTemplate `shouldBe`
       Vec.fromList (getNames @BordereauRow)
#+END_SRC 

* Updates
+ Anyone 
+ CI 
+ Easy!

* Questions?
