#+TITLE: Keter & nix

* Ask questions anytime!

* Motivation
+ Avoid stress
+ Downtime.
    + No good reasons 
    + Update database structure
    + Every deploy

* Goals 
+ CONTEXT: What is going on in our server?!
+ LEVEL 1: how does keter work?
+ LEVEL 2: how is integrated into nix/nixos

Have fun.

* 
  + What is a http request?

*    
  Hyper Text Transmission Protocol

  But in reality it's this:
  
#+BEGIN_SRC text
  ✦ ❯ nc -l localhost 3000
  GET /can/put/anything/here HTTP/1.1
  Host: localhost:3000
  Connection: keep-alive
  Cache-Control: max-age=0
  ...
#+END_SRC

* 
  What makes these?

* 
  Browser!
  [[https://upload.wikimedia.org/wikipedia/commons/d/d2/Firefox_Logo%2C_2017.png]]
* 
  + For our specific setup,
    which software handles a request first?

* Nginx

* 
**    previously
#+BEGIN_SRC text
nginx -> haskell code (yesod) 
#+END_SRC

* 
** How this works
    + Kill the old app.
    + nginx shows down for maintenance (downtime begin)
    + Boot new app.
      + App runs migrations
      + App does checks
      + App binds to port 
    + Nginx can route to port again. (downtime over)
* 
**    current 
#+BEGIN_SRC text
  nginx -> keter |-> new haskell
                 |-> old haskell
#+END_SRC

* 
  Can the down for maintenance screen still occur?

* 
  Of course!
  + Keter can get killed as well
    + If it's ever updated
    + Can run out of memory 
  
* LEVEL 1:
**  How does keter work?

* 
  Directories

#+BEGIN_SRC bash
/opt/keter/
           incoming/supercede.keter
           log/keter/current.log
           log/keter/20210421_160003.log
           log/app-supercede/current.log
           log/app-supercede/20210423_002835.log
           temp/supercede-8/env-vars
           temp/supercede-8/client_session_key.aes
           temp/supercede-8/config
           temp/supercede-8/config/keter.yaml
#+END_SRC 

* Bundle   
 0. has to contain:
    =config/keter.yaml=
 1. Combine everything.
    #+BEGIN_SRC bash
    tar -zcvf $out/bundle.tar.gz.keter ./.
    #+END_SRC
 2. upload to server.
 3. Put it in =/opt/keter/incoming=.


* 
  What do we specifically put into a bundle?

*  
  In our case just:
    =config/keter.yaml=

* 

What is a bundle?
How is a bundle loaded?
Health check?
How does it assign ports?
  Does it recycle ports?
How does logging work?
What does keter do?

For hash function, go to fixed output based on content
for example a css out path has to be unique


## JEzen notes
- How does it know when a new application bundle is ready
- What is an application bundle
- How does it do a health check?
- How many ports does it use? Does it recycle the ports?
- How does logging work? Files? Journalctl?
- Who owns Keter? Can we be maintainers?
- Which features did we enable or disable? Why?
- How are static files currently handled? How could it be done better?
