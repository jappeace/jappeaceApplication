#+TITLE: Keter & nix

* Ask questions anytime!

* Motivation
+ Avoid stress
+ Downtime.
    + No good reasons 
    + Update database structure
    + Every deploy

* Goals 
+ CONTEXT: What is going on in our server?!
+ LEVEL 1: how does keter work?
+ LEVEL 2: how is integrated into nix/nixos

Have fun.

* 
  What happens if you click a button in the browser in our app?

* A request!
#+BEGIN_SRC text
  ✦ ❯ nc -l localhost 3000
  GET /can/put/anything/here HTTP/1.1
  Host: localhost:3000
  Connection: keep-alive
  Cache-Control: max-age=0
  ...
#+END_SRC

* What's a port?

* 
  + A gateway to a computer
  + One single program will listen
  + Many can connect
  + Over ip 
    + firewalls
    + dns
    + etc

* 
  + For our specific setup,
    which software handles a request first?

* Nginx

* 
**    previously
#+BEGIN_SRC text
nginx -> haskell code (yesod) 
#+END_SRC

* 
  What happens if we update the haskell code in this situation?

* 
** How this works
    + Kill the old app.
    + nginx shows down for maintenance (downtime begin)
    + Boot new app.
      + App runs migrations
      + App does checks
      + App binds to port 
    + Nginx can route to port again. (downtime over)
* 
**    current 
#+BEGIN_SRC text
  nginx -> keter |-> new haskell
                 |-> old haskell
#+END_SRC

* 
  Can the down for maintenance screen still occur?

* 
  Of course!
  + Keter can get killed as well
    + If it's ever updated
    + Can run out of memory 
  
* Goals 
+ +CONTEXT: What is going on in our server?!+
+ LEVEL 1: how does keter work?
+ LEVEL 2: how is integrated into nix/nixos

* Directories

#+BEGIN_SRC bash
$ ls /opt/keter/
> /opt/keter/
              incoming/supercede.keter
              ...
#+END_SRC 
* Log

#+BEGIN_SRC bash
/opt/keter/
            incoming/supercede.keter
            log/keter/current.log
            log/keter/20210421_160003.log
            log/app-supercede/current.log
            log/app-supercede/20210423_002835.log
            ...
#+END_SRC 
* Temp

#+BEGIN_SRC bash
/opt/keter/
           incoming/supercede.keter
           log/keter/current.log
           log/keter/20210421_160003.log
           log/app-supercede/current.log
           log/app-supercede/20210423_002835.log
           temp/supercede-8/env-vars
           temp/supercede-8/client_session_key.aes
           temp/supercede-8/config
           temp/supercede-8/config/keter.yaml
#+END_SRC 

* Bundle   
 0. has to contain:
    =config/keter.yaml=
 1. Combine everything.
    #+BEGIN_SRC bash
    tar -zcvf $out/bundle.tar.gz.keter ./.
    #+END_SRC
 2. upload to server.
 3. Put it in =/opt/keter/incoming=.

* Goals 
+ +CONTEXT: What is going on in our server?!+
+ +LEVEL 1: how does keter work?+
+ LEVEL 2: how is integrated into nix/nixos

* 
  What do we specifically put into a bundle?

*  
  In our case just:
    =config/keter.yaml=

* Hash function
  Let's pretend that

#+BEGIN_SRC haskell
hash :: ByteString  -> Word32
#+END_SRC

+ In: Arbitrary length
+ Out: Fixed length
+ Output dependents on input
+ Any change input see in output
+ There maybe a clash 

* Take all inputs
+ Source code
+ Compilers
+ Environment variables
+ Compiler settings
+ Dependencies!

* A nix out path
#+BEGIN_SRC
/nix/store/7ynqpw8sm6s6kflb59m9q7ccpa21rcim-talks
#+END_SRC
The out hash is:
#+BEGIN_SRC
7ynqpw8sm6s6kflb59m9q7ccpa21rcim
#+END_SRC

* 
  The contents of config file
#+BEGIN_SRC json
{"stanzas":[{
    "exec":"/nix/store/fs9y9g1fd0hmyvzsc7x5xxaphm1sp22j-supercede/bin/supercede",
    "host":"staging.supercede.com",
    "type":"webapp"
}]}
#+END_SRC

* 
  What is logging?

* 
#+BEGIN_SRC shell
[root@riskbook_staging:/opt/keter/log/app-supercede]# head current.log 
24/Apr/2021:18:26:46 +0000 [Debug#SQL] UPDATE "worker_queue"
SET "status" = ?, "modified_at" = NOW()
WHERE ?
; [PersistText "{\"tag\":\"TaskTaken\"}",PersistBool False]
24/Apr/2021:18:26:46 +0000 [Debug#SQL] SELECT "worker_queue"."id", "worker_queue"."type", "worker_queue"."data", "worker_queue"."status", "worker_queue"."modified_at"
FROM "worker_queue"
WHERE ("worker_queue"."type" = ?) AND ("worker_queue"."status" IN (?, ?))
ORDER BY "worker_queue"."modified_at" ASC
 LIMIT 1
FOR UPDATE SKIP LOCKED; [PersistText "EmailWorker",PersistText "{\"tag\":\"TaskPending\"}",PersistText "{\"tag\":\"TaskFinished\",\"contents\":{\"tag\":\"TaskFailedRetry\"}}"]
#+END_SRC

* Systemd
  We need to get this out of the file, into systemd


#+BEGIN_SRC shell
[root@riskbook_staging:/opt/keter/log/app-supercede]# head current.log 
    [root@riskbook_staging:/root]# journalctl -f
  Apr 24 20:14:30 riskbook_staging influxd[18209]: [httpd] ::1 - - [24/Apr/2021:20:14:30 +0000] "POST /write?db=collectd&precision=n HTTP/1.1" 204 0 "-" "-" ad774b90-a539-11eb-8ce9-06168faee19e 39000
  Apr 24 20:14:30 riskbook_staging postgres[31200]: [31200] LOG:  statement: BEGIN
  Apr 24 20:14:30 riskbook_staging postgres[31200]: [31200] LOG:  duration: 0.066 ms
  Apr 24 20:14:30 riskbook_staging postgres[31200]: [31200] LOG:  statement: SELECT "worker_queue"."id", "worker_queue"."type", "worker_queue"."data", "worker_queue"."status", "worker_queue"."modified_at"
  Apr 24 20:14:30 riskbook_staging postgres[31200]:         FROM "worker_queue"
  Apr 24 20:14:30 riskbook_staging postgres[31200]:         WHERE ("worker_queue"."type" = 'PackArchiveWorker') AND ("worker_queue"."status" IN ('{"tag":"TaskPending"}', '{"tag":"TaskFinished","contents":{"tag":"TaskFailedRetry"}}'))
  Apr 24 20:14:30 riskbook_staging postgres[31200]:         ORDER BY "worker_queue"."modified_at" ASC
#+END_SRC


* 
#+BEGIN_SRC nix
  keter = {
    description = "keter app loader";
    script = ''
      set -xe
      mkdir -p ${incoming}
      { tail -F /opt/keter/log/keter/current.log -n 0 & ${pkgs.haskellPackages.keter}/bin/keter ${globalKeterConfigFile}; }
    '';
    ...
#+END_SRC

* Any questions?
  Or be in peace with confusion.

* Thanks for watching
  Leave a like and subscribe.

* BONUS SLIDES

* 
    How does it assign ports? 

* 
  There is a portpool file.
  https://github.com/snoyberg/keter/blob/master/Keter/PortPool.hs#L30

* 
    Who owns keter?

* 
  [[./img/snoyboi.jpg]]


* 
     + Michael Snoyman has copyright.
     + There is a MIT license on this.
     + We can use it as long as:
        + We don't hold him liable.
        + We're also not allowed to take credit.

