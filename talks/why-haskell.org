#+TITLE: Why Haskell?

* About me
+ haskell consultant
+ 6 years of haskell
+ 16 years of programming

*  Ask questions!

* Motivation
+ Precast reflection
+ Good question!


* Type system
+ what is?

* Type system
+ what is?
+ feedback loop

* Type system
+ what is?
+ feedback loop
+ code re-use

* Type system
+ what is?
+ feedback loop
+ code re-use
+ hoogle

* Type system
+ what is?
+ feedback loop
+ code re-use
+ hoogle
+ other langauges

* Expressivness
0,1,1,2,3,5,8,13...

#+BEGIN_SRC haskell
fibonacci :: [Integer]
fibonacci = fix recurse 

recurse :: [Integer] -> [Integer]
recurse xs = 0:1:zipWith (+) xs (tail xs)
#+END_SRC

* Expressivness
#+BEGIN_SRC haskell
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
#+END_SRC

* Petri dish
+ dependent types
+ effect systems
+ property tests

* Maintainability


* Disadvantages
+ Learning curve

~2 weeks of trouble


* Disadvantages
+ Learning curve
  + one time investment
  + we focus on what matters
    + no type families,
    + no TH etc.

* Tooling 
Especially HLS is unreliable
(frustrating)

* Tooling 
Especially HLS is unreliable
+ -> use ghc directly
* Commercial adoptation 
+ unmaintained libraries
+ not existing libraries

* Commercial adoptation 
+ github
+ Scrive
+ Mercury
+ Groq
+ Supercede

* 
If haskell is so great?
What happened at precast before I joined?
Why the frustration?

* 
Engineers like finding the best.
So they did.

* 
Issues

+ Use of advanced dev tools
+ We used advanced haskell featuers
+ Advanced libraries

* 
Beginners had to use these.

